@model int

@{
    bool required = ViewData["required"] == null ? false : (bool)ViewData["required"];
    String onDataBound = ViewData["onDataBound"] == null ? String.Empty : (String)ViewData["onDataBound"];
    String onChange = ViewData["onChange"] == null ? String.Empty : (String)ViewData["onChange"];

    Dictionary<String, object> attributes = new Dictionary<string, object>();
    attributes.Add("style", "width:100%;");
    attributes.Add("class", "includeHidden");

    if (required)
    {
        attributes.Add("required", "");
    }

    int cols = ViewData["cols"] == null ? 3 : (int)ViewData["cols"];
}

<div class="form-group">
    @Html.LabelFor(m => m, new { @class = String.Format("col-sm-{0} control-label", cols) })
    <div class='@String.Format("col-sm-{0}", 12 - cols)'>
        @(Html.Kendo().ComboBoxFor(m => m)
            .DataTextField("Name")
            .DataValueField("Id")
            .SelectedIndex(0)
            .Filter("contains")
            .Events(events =>
            {
                if (!String.IsNullOrEmpty(onDataBound))
                {
                    events.DataBound(onDataBound);
                }

                if (!String.IsNullOrEmpty(onChange))
                {
                    events.Change(onChange);
                }
            })
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetTradingAccounts", "TradingAccounts")
                    .Data("function(){ return { cacheCounter: abp.setting.get('TradingAccountsCacheCounter')} }"); ;
                })
                .ServerFiltering(false);
            })
            .HtmlAttributes(attributes)
        )
    </div>
</div>
